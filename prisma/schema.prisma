generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Admin {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String?  @unique
  password  String
  createdAt DateTime @default(now())
}

model Penyuluh {
  id          String             @id @default(uuid())
  username    String             @unique
  name        String
  email       String?            @unique
  phone       String             @unique
  address     String
  img         String?
  bidang      String[]
  createdAt   DateTime           @default(now())
  birthday    DateTime
  gender      UserSex
  surname     String
  desaBinaan  DesaBinaan[]
  dokumentasi DokumentasiAcara[]
  kegiatan    Kegiatan[]
  materi      Materi[]
  pengumuman  Pengumuman[]
}

model DesaBinaan {
  id           String         @id @default(uuid())
  name         String
  penyuluhId   String?
  penyuluh     Penyuluh?      @relation(fields: [penyuluhId], references: [id])
  kelompokTani KelompokTani[]
  pengumuman   Pengumuman[]
}

model KelompokTani {
  id           String       @id @default(uuid())
  name         String
  ketua        String
  phone        String       @unique
  address      String
  img          String?
  createdAt    DateTime     @default(now())
  desaBinaanId String?
  username     String
  luasArea     Float?
  desaBinaan   DesaBinaan?  @relation(fields: [desaBinaanId], references: [id])
  pengumuman   Pengumuman[]
}

model KiosPertanian {
  id         String           @id @default(uuid())
  name       String
  owner      String
  address    String
  phone      String           @unique
  createdAt  DateTime         @default(now())
  img        String?
  pengumuman KiosPengumuman[]
}

model Materi {
  title      String
  fileName   String
  fileUrl    String
  uploadDate DateTime  @default(now())
  updateDate DateTime  @updatedAt
  penyuluhId String?
  id         String    @id @default(uuid())
  penyuluh   Penyuluh? @relation(fields: [penyuluhId], references: [id])
}

model Kegiatan {
  title       String    @unique
  description String
  startDate   DateTime
  endDate     DateTime
  day         Day
  penyuluhId  String?
  id          String    @id @default(uuid())
  penyuluh    Penyuluh? @relation(fields: [penyuluhId], references: [id])
}

model DokumentasiAcara {
  id          String    @id @default(uuid())
  title       String
  description String
  photo       String
  date        DateTime
  penyuluhId  String?
  penyuluh    Penyuluh? @relation(fields: [penyuluhId], references: [id])
}

model Pengumuman {
  id             String           @id @default(uuid())
  title          String
  description    String
  date           DateTime         @default(now())
  penyuluhId     String?
  kelompokTaniId String?
  desaBinaanId   String?
  kios           KiosPengumuman[]
  desaBinaan     DesaBinaan?      @relation(fields: [desaBinaanId], references: [id])
  kelompokTani   KelompokTani?    @relation(fields: [kelompokTaniId], references: [id])
  penyuluh       Penyuluh?        @relation(fields: [penyuluhId], references: [id])
}

model KiosPengumuman {
  id              String         @id @default(uuid())
  kiosPertanianId String?
  pengumumanId    String
  kiosPertanian   KiosPertanian? @relation(fields: [kiosPertanianId], references: [id])
  pengumuman      Pengumuman     @relation(fields: [pengumumanId], references: [id], onDelete: Cascade)

  @@unique([kiosPertanianId, pengumumanId])
}

enum UserSex {
  PRIA
  WANITA
}

enum Day {
  Senin
  Selasa
  Rabu
  Kamis
  Jumat
}
